{"version":3,"sources":["services/api.js","day/index.js","dashboard/index.js","header/index.js","information/index.js","App.js","serviceWorker.js","index.js"],"names":["api","axios","create","baseURL","Day","props","useState","dt","setDt","useEffect","console","log","data","Date","day","dt_txt","getDay","id","className","slice","split","reverse","join","replace","src","weather","icon","alt","Number","main","temp_max","toFixed","temp_min","Dashboard","datas","setDatas","a","async","get","response","newData","list","map","item","date_sort_asc","date1","date2","sort","lastDate","parseInt","getTime","includes","loadWeather","Object","keys","length","key","Header","Information","rel","target","href","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sWAMeA,E,OAJHC,EAAMC,OAAO,CACrBC,QAAS,uGCwBEC,G,MAtBH,SAAAC,GAAU,IAAD,EACGC,mBAAS,IADZ,mBACVC,EADU,KACNC,EADM,KASjB,OANAC,qBAAU,WACNC,QAAQC,IAAI,SACZD,QAAQC,IAAIN,GACZ,IAAIO,EAAO,IAAIC,KAAKR,EAAMS,IAAIC,QAC9BP,EAAMI,EAAKI,YACZ,IAEC,yBAAKC,GAAG,OACJ,8BATS,CAAC,UAAW,UAAW,WAAS,SAAU,SAAU,QAAS,aAStDV,IAChB,0BAAMW,UAAU,YAAYb,EAAMS,IAAIC,OAAOI,MAAM,EAAG,IAAIC,MAAM,KAAKC,UAAUC,OAAOC,QAAQ,IAAK,MACnG,yBAAKC,IAAK,mCAAqCnB,EAAMS,IAAIW,QAAQ,GAAGC,KAAO,OAAQC,IAAKtB,EAAMS,IAAIP,KAClG,yBAAKW,UAAU,eACX,0BAAMA,UAAU,OAAOU,OAAOvB,EAAMS,IAAIe,KAAKC,SAAW,QAAQC,QAAQ,GAAxE,QACA,0BAAMb,UAAU,OAAOU,OAAOvB,EAAMS,IAAIe,KAAKG,SAAW,QAAQD,QAAQ,GAAxE,YCdD,SAASE,IAAa,IAAD,EACN3B,mBAAS,IADH,mBACzB4B,EADyB,KAClBC,EADkB,KAoChC,OAlCA1B,qBAAU,YACN,yBAAA2B,EAAAC,OAAA,kEAAAD,EAAA,MAC2BpC,EAAIsC,IAAI,GAAI,KADvC,OACUC,EADV,OAGQC,EAAUD,EAAS3B,KAAK6B,KAAKC,KAAI,SAAAC,GAEjC,OADW,IAAI9B,KAAa,IAAR8B,EAAKpC,OAGvBqC,EAAgB,SAACC,EAAOC,GAC1B,OAAID,EAAQC,EAAc,EACtBD,EAAQC,GAAe,EACpB,GAGXN,EAAUA,EAAQO,KAAKH,GACnBI,EAAWR,EAAQ,GAAGxB,SAAW,EACrCwB,EAAUA,EAAQE,KAAI,SAAAC,GAClB,GAAIA,EAAK3B,WAAagC,EAElB,OADAA,EAAWL,EAAK3B,SACTiC,UAAUN,EAAKO,UAAY,KAAMnB,QAAQ,IAEhDiB,EAAWL,EAAK3B,YAIxBuB,EAAS3B,KAAK6B,KAAOF,EAAS3B,KAAK6B,KAAKC,KAAI,SAAAC,GACxC,GAAIH,EAAQW,SAASR,EAAKpC,IAAK,OAAOoC,KAG1CR,EAASI,EAAS3B,MA5BtB,sCA8BAwC,KACD,IAKC,yBAAKnC,GAAG,aACHoC,OAAOC,KAAKpB,GAAOqB,OAAS,EACzB,oCACKrB,EAAMO,KAAKC,KAAI,SAAC5B,EAAK0C,GAClB,GAAI1C,EACA,OAAO,kBAAC,EAAD,CAAKA,IAAKA,EAAK0C,IAAKA,QAKvC,sC,UC5CDC,EARA,WACX,OACI,gCACE,gDCOKC,G,MAVK,WAChB,OACI,yBAAKzC,GAAG,eACJ,4DAC4B,uBAAG0C,IAAI,sBAAuBC,OAAO,SAASC,KAAK,+BAAnD,0BCWzBC,MAZf,WACE,OACE,yBAAK5C,UAAU,OACb,kBAAC,EAAD,MACA,iCACI,kBAACe,EAAD,MACA,kBAAC,EAAD,SCDU8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4300e9a9.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst api = axios.create({\r\n    baseURL: 'https://api.openweathermap.org/data/2.5/forecast?id=3448433&APPID=8f34ff6349e06c9ef90bb986c86ab9b4'\r\n});\r\n\r\nexport default api;","import React, {useEffect, useState} from 'react';\r\n\r\nimport './index.css'\r\n// import nuvem from '../assets/nuvem.png'\r\n\r\nconst Day = props => {\r\n    const [dt, setDt] = useState('');\r\n    const weekDays = ['Domingo', 'Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta', 'Sábado'];\r\n    useEffect(() => {\r\n        console.log(\"props\");\r\n        console.log(props);\r\n        let data = new Date(props.day.dt_txt);\r\n        setDt(data.getDay());\r\n    }, []);\r\n    return (\r\n        <div id=\"day\">\r\n            <span>{weekDays[dt]}</span>\r\n            <span className=\"backspan\">{props.day.dt_txt.slice(5, 10).split(\"-\").reverse().join().replace(\",\", \"/\")}</span>\r\n            <img src={\"http://openweathermap.org/img/w/\" + props.day.weather[0].icon + \".png\"} alt={props.day.dt} />\r\n            <div className=\"temperature\">\r\n                <span className=\"max\">{Number(props.day.main.temp_max - 275.15).toFixed(1)}º</span>\r\n                <span className=\"min\">{Number(props.day.main.temp_min - 275.15).toFixed(1)}º</span>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Day;\r\n","import React, {useEffect, useState} from 'react';\r\n\r\nimport './index.css'\r\nimport api from '../services/api'\r\n\r\nimport Day from '../day'\r\n\r\nexport default function Dashboard() {\r\n    const [datas, setDatas] = useState({});\r\n    useEffect(() => {\r\n        async function loadWeather() {\r\n            const response = await api.get('', {});\r\n\r\n            let newData = response.data.list.map(item => {\r\n                let data = new Date(item.dt*1000);\r\n                return data\r\n            });\r\n            const date_sort_asc = (date1, date2) => {\r\n                if (date1 > date2) return 1;\r\n                if (date1 < date2) return -1;\r\n                return 0;\r\n            };\r\n\r\n            newData = newData.sort(date_sort_asc);\r\n            let lastDate = newData[0].getDay() - 1;\r\n            newData = newData.map(item => {\r\n                if (item.getDay() !== lastDate) {\r\n                    lastDate = item.getDay();\r\n                    return parseInt((item.getTime() / 1000).toFixed(0))\r\n                } else {\r\n                    lastDate = item.getDay();\r\n                }\r\n            });          \r\n\r\n            response.data.list = response.data.list.map(item => {\r\n                if (newData.includes(item.dt)) return item\r\n            }) \r\n\r\n            setDatas(response.data);\r\n        }\r\n        loadWeather();\r\n    }, [])\r\n    \r\n    return (\r\n\r\n        \r\n        <div id=\"dashboard\">\r\n            {Object.keys(datas).length > 0 ? (\r\n                <>\r\n                    {datas.list.map((day, key) => {\r\n                        if (day) {\r\n                            return <Day day={day} key={key}></Day>\r\n                        }\r\n                    })} \r\n                </>\r\n            ) : (\r\n                <>\r\n                </>\r\n            )}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nimport './index.css'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header>\r\n          <h1>Weather Report</h1>\r\n        </header>\r\n    )\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nimport './index.css';\r\n\r\nconst Information = () => {\r\n    return (\r\n        <div id='information'>\r\n            <span>\r\n                Construído com a API do <a rel=\"noopener noreferrer\"  target=\"_blank\" href=\"https://openweathermap.org/\">openweathermap.org</a>\r\n            </span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Information;\r\n","import React from 'react';\nimport './App.css';\n\nimport Dashboard from './dashboard'\nimport Header from './header'\nimport Information from './information'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <section>\n          <Dashboard />\n          <Information />\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}